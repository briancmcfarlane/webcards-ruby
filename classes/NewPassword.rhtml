<%
require 'digest/sha1'

class NewPassword	

	attr_accessor :hash, :dts, :keys, :tbl, :errs, :e, :t

	def createForm(e, t, rs, dts)
#		if(rs::nil? || rs!='y')
			pwd1 = ''
			pwd1_err = ''
			pwd2 = ''
			pwd2_err = ''
			@e = e
			@t = t
#
#		else
#			#open file and put contents into hash. You must create a file that has at least one has to start with.
#			@hash = File.open("temp_files/temp_pwd_data.txt", "rb") {|f| Marshal.load(f)}	
#			temp = @hash[dts]
#			pwd1 = temp[0]
#			pwd1_err = temp[1]
#			pwd2 = temp[2]
#			pwd2_err = temp[3]
#			@e = temp[4]
#			@t = temp[5]
#			
#			#delete current temp values
#				@hash.delete(dts)
#			#write hash back to file
#				File.open("temp_files/temp_pwd_data.txt", "wb") {|f| Marshal.dump(@hash, f)}
#		end
		buildForm(pwd1, pwd1_err, pwd2, pwd2_err)
	end
	
	def buildForm(pwd1, pwd1_err, pwd2, pwd2_err)
		@form = '<form method="post" action="resetrequest.rhtml">
    		<div>
            	<label for="pwd1">Password: </label><input type="text" size="20" name="pwd1" id="pwd1" tabindex="110" value="'+ pwd1 +'"/>
				<input type="text" size="20" name="pwd1_error" id="pwd1_error" class="err_msg" readonly="readonly" value="'+ pwd1_err +'" /><br />
          		
          		<label for="pwd2">Confirm Password: </label><input type="text" size="20" name="pwd2" id="pwd2" tabindex="110" value="'+ pwd2 +'"/>
				<input type="text" size="20" name="pwd2_error" id="pwd2_error" class="err_msg" readonly="readonly" value="'+ pwd2_err +'" /><br />

				<input type="hidden" name="e" value="'+ @e +'" />
				<input type="hidden" name="t" value="'+ @t +'" />
				
      			<label>&nbsp;</label><input type="hidden" name="submitted" value="y" /><input type="submit" value="Send" /><br />
    		</div>
   	</form>'
		return @form
	end

	def newPwd(pwd1, pwd2, e, t)
		#validating form
			@errs = 'n'
			pwd1_err = validPwd(pwd1, pwd2)
			pwd2_err = ''
#			
#			if(@errs == 'y')
#				#open file and put contents into temp hash
#					@hash = File.open("temp_files/temp_pwd_data.txt", "rb") {|f| Marshal.load(f)}
#				#time stamp and add new information to hash
#					tme = Time.now.strftime("%m%j%Y%H%M%S")
#					@dts = tme.to_s()
#					@hash[@dts]=[pwd1, pwd1_err, pwd2, pwd2_err, @e, @t]
#				#write hash back to file
#					File.open("temp_files/temp_pwd_data.txt", "wb") {|f| Marshal.dump(@hash, f)}
#			else
				resetPwd(e, pwd1)			
#			end
	end
	
	def validPwd(pwd1, pwd2)
		msg = ''
#		if(pwd1 =="")
#			msg = 'Please enter a valid password.'
#			@errs = 'y'
#		else
#			len = pwd.length
#			if(pwd !~ /[A-Z]/g || pwd !~ /[a-z]/g ||pwd !~ /[0-9]/g || len < 7)
#				msg = 'Does not meet requirements.'
#				@errs = 'y'
#			else
#				if(pwd1 != pwd2)
#					msg = 'Passwords do not match'
#					@errs = 'y'
#				end
#			end
#		end
		return msg
	end
	
	def resetPwd(email, pwd)
		hashedPW = Digest::SHA1.hexdigest(pwd)
		hash = File.open("data/user_accounts.txt", "rb") {|f| Marshal.load(f)}
		if (hash.has_key?(email))
			temp = hash[email]
			temp[0] = hashedPW
			hash[email] = temp
		end
		#write hash back to file
			File.open("data/user_accounts.txt", "wb") {|f| Marshal.dump(hash, f)}
	end
		
	def redirect
#		redirect = ''
#		if (@errs == 'n')
			redirect = "<script type='text/javascript'>window.location = 'index.rhtml?p=resetsuccess'</script>"
#		else
#			redirect = "<script type='text/javascript'>window.location = 'index.rhtml?p=newpassword&e="+ @e +"&t="+ @t +"&rs="+ @errs +"&dts="+ @dts +"'</script>"
#		end
		print redirect
	end
	
end

%>